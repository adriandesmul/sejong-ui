# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: npm run build

      - persist_to_workspace:
          root: .
          paths:
              - dist/*

      # run tests!
      # - run: npm test

  deploy-dev:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy to S3
          working_directory: ~/repo/dist
          command: aws s3 sync . s3://dev.sejongculturalsociety.info --delete --acl public-read
      #- run:
      #    name: Clear CloudFront cache
      #    command: aws cloudfront create-invalidation --distribution-id=E3RZ5IOXWQ7FBB --paths "/*"

  deploy-prod:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy to S3
          working_directory: ~/repo/dist
          command: aws s3 sync . s3://sejongculturalsociety.info --delete --acl public-read
      #- run:
      #    name: Clear CloudFront cache
      #    command: aws cloudfront create-invalidation --distribution-id=E3I2BOCQJ29ZUW --paths "/*"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-dev:
          context: sejong
          requires:
            - build
          filters:
            branches:
              only: dev
      - prod-approval:
          type: approval
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-prod:
          context: sejong
          requires:
            - prod-approval
